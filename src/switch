
                switch(move){
                    case -8 : {
                        if(UP){
                            if(board.tiles[nextMove].piece && board.tiles[nextMove].piece.color===piece.color) break;
                            else piece.legalMoves.push(nextMove);
                        }
                        break;
                    }
                    case 8 : {
                        if(DOWN){
                            if(board.tiles[nextMove].piece && board.tiles[nextMove].piece.color === piece.color) break;
                            else piece.legalMoves.push(nextMove);
                        }
                        break;
                    }
                    case 1 : {
                        if(RIGHT){
                            if(board.tiles[nextMove].piece && board.tiles[nextMove].piece.color === piece.color) break;
                            else piece.legalMoves.push(nextMove);
                        }
                        break;
                    }
                    case -1 : {
                        if(LEFT){
                            if(board.tiles[nextMove].piece && board.tiles[nextMove].piece.color === piece.color) break;
                            else piece.legalMoves.push(nextMove);
                        }
                        break;
                    }
                    case -7 : {
                        if(UPRIGHT){
                            if(board.tiles[nextMove].piece && board.tiles[nextMove].piece.color === piece.color) break;
                            else piece.legalMoves.push(nextMove);
                        }
                        break;
                    }
                    case 9 : {
                        if(DOWNRIGHT){
                            if(board.tiles[nextMove].piece && board.tiles[nextMove].piece.color === piece.color) break;
                            else piece.legalMoves.push(nextMove);
                        }
                        break;
                    }
                    case 7 : {
                        if(DOWNLEFT){
                            if(board.tiles[nextMove].piece && board.tiles[nextMove].piece.color === piece.color) break;
                            else piece.legalMoves.push(nextMove);
                        }
                        break;
                    }
                    case -9 : {
                        if(UPLEFT){
                            if(board.tiles[nextMove].piece && board.tiles[nextMove].piece.color === piece.color) break;
                            else piece.legalMoves.push(nextMove);
                        }
                        break;
                    }
                    case -10 : {
                        if(NU2L){
                            if(board.tiles[nextMove].piece && board.tiles[nextMove].piece.color === piece.color) break;
                            else piece.legalMoves.push(nextMove);
                        }
                        break;
                    }
                    case -17 : {
                        if(N2UL){
                            if(board.tiles[nextMove].piece && board.tiles[nextMove].piece.color === piece.color) break;
                            else piece.legalMoves.push(nextMove);
                        }
                        break;
                    }
                    case -15 : {
                        if(N2UR){
                            if(board.tiles[nextMove].piece && board.tiles[nextMove].piece.color === piece.color) break;
                            else piece.legalMoves.push(nextMove);
                        }
                        break;
                    }
                    case -6 : {
                        if(NU2R){
                            if(board.tiles[nextMove].piece && board.tiles[nextMove].piece.color === piece.color) break;
                            else piece.legalMoves.push(nextMove);
                        }
                        break;
                    }
                    case 10 : {
                        if(ND2R){
                            console.log(INDEX, move, nextMove)
                            if(board.tiles[nextMove].piece && board.tiles[nextMove].piece.color === piece.color) break;
                            else piece.legalMoves.push(nextMove);
                        }
                        break;
                    }
                    case 17 : {
                        if(N2DR){
                            if(board.tiles[nextMove].piece && board.tiles[nextMove].piece.color === piece.color) break;
                            else piece.legalMoves.push(nextMove);
                        }
                        break;
                    }
                    case 15 : {
                        if(N2DL){
                            if(board.tiles[nextMove].piece && board.tiles[nextMove].piece.color === piece.color) break;
                            else piece.legalMoves.push(nextMove);
                        }
                        break;
                    }
                    case 6 : {
                        if(ND2L){
                            if(board.tiles[nextMove].piece && board.tiles[nextMove].piece.color === piece.color) break;
                            else piece.legalMoves.push(nextMove);
                        }
                        break;
                    }
                    default : break;
                }

                if(['p', 'N', 'K'].includes(piece.notation)){
            for (let move of piece.moves){
                const nextMove = piece.tileIndex+move;
                
                if(move === -8 && UP){
                    if(!(board.tiles[nextMove].piece && board.tiles[nextMove].piece.color === piece.color)) piece.legalMoves.push(nextMove);
                }
                if(move === 8 && DOWN){
                    if(!(board.tiles[nextMove].piece && board.tiles[nextMove].piece.color === piece.color)) piece.legalMoves.push(nextMove);
                }
                if(move === 1 && RIGHT){
                    if(!(board.tiles[nextMove].piece && board.tiles[nextMove].piece.color === piece.color)) piece.legalMoves.push(nextMove);
                }
                if(move === -1 && LEFT){
                    if(!(board.tiles[nextMove].piece && board.tiles[nextMove].piece.color === piece.color)) piece.legalMoves.push(nextMove);
                }
                if(move === -7 && UPRIGHT){
                    if(!(board.tiles[nextMove].piece && board.tiles[nextMove].piece.color === piece.color)) piece.legalMoves.push(nextMove);
                }
                if(move === 9 && DOWNRIGHT){
                    if(!(board.tiles[nextMove].piece && board.tiles[nextMove].piece.color === piece.color)) piece.legalMoves.push(nextMove);
                }
                if(move === 7 && DOWNLEFT){
                    if(!(board.tiles[nextMove].piece && board.tiles[nextMove].piece.color === piece.color)) piece.legalMoves.push(nextMove);
                }
                if(move === -9 && UPLEFT){
                    if(!(board.tiles[nextMove].piece && board.tiles[nextMove].piece.color === piece.color)) piece.legalMoves.push(nextMove);
                }
                if(move === -10 && NU2L){
                    if(!(board.tiles[nextMove].piece && board.tiles[nextMove].piece.color === piece.color)) piece.legalMoves.push(nextMove);
                }
                if(move === -17 && N2UL){
                    if(!(board.tiles[nextMove].piece && board.tiles[nextMove].piece.color === piece.color)) piece.legalMoves.push(nextMove);
                }
                if(move === -15 && N2UR){
                    if(!(board.tiles[nextMove].piece && board.tiles[nextMove].piece.color === piece.color)) piece.legalMoves.push(nextMove);
                }
                if(move === -6 && NU2R){
                    if(!(board.tiles[nextMove].piece && board.tiles[nextMove].piece.color === piece.color)) piece.legalMoves.push(nextMove);
                }
                if(move === 6 && ND2L){
                    if(!(board.tiles[nextMove].piece && board.tiles[nextMove].piece.color === piece.color)) piece.legalMoves.push(nextMove);
                }
                if(move === 15 && N2DL){
                    if(!(board.tiles[nextMove].piece && board.tiles[nextMove].piece.color === piece.color)) piece.legalMoves.push(nextMove);
                }
                if(move === 17 && N2DR){
                    if(!(board.tiles[nextMove].piece && board.tiles[nextMove].piece.color === piece.color)) piece.legalMoves.push(nextMove);
                }
                if(move === 10 && ND2R){
                    if(!(board.tiles[nextMove].piece && board.tiles[nextMove].piece.color === piece.color)) piece.legalMoves.push(nextMove);
                }
            }
        }
        else{
            for (let move of piece.moves){
                let nextMove = piece.tileIndex+move;
                
                if(move === -8){
                    while(nextMove>=0){
                        if(board.tiles[nextMove].piece){
                            if(board.tiles[nextMove].piece.color != piece.color){
                                piece.legalMoves.push(nextMove);
                                break;
                            }
                            else break;
                        }
                        else{
                            piece.legalMoves.push(nextMove);
                            nextMove+=move;
                        }
                    }
                }
                if(move === 8){
                    while(nextMove<=63){
                        if(board.tiles[nextMove].piece){
                            if(board.tiles[nextMove].piece.color != piece.color){
                                piece.legalMoves.push(nextMove);
                                break;
                            }
                            else break;
                        }
                        else{
                            piece.legalMoves.push(nextMove);
                            nextMove+=move;
                        }
                    }
                }
                if(move === 1){
                    while(nextMove<64 && nextMove%8<7){
                        if(board.tiles[nextMove].piece){
                            if(board.tiles[nextMove].piece.color != piece.color){
                                piece.legalMoves.push(nextMove);
                                break;
                            }
                            else break;
                        }
                        else{
                            piece.legalMoves.push(nextMove);
                            nextMove+=move;
                        }
                    }
                }
                if(move === -1){
                    while(nextMove>-1 && nextMove%8>0){
                        if(board.tiles[nextMove].piece){
                            if(board.tiles[nextMove].piece.color != piece.color){
                                piece.legalMoves.push(nextMove);
                                break;
                            }
                            else break;
                        }
                        else{
                            piece.legalMoves.push(nextMove);
                            nextMove+=move;
                        }
                    }
                }
                if(move === -7){
                    while(nextMove>0 && nextMove%8!=0){
                        if(board.tiles[nextMove].piece){
                            if(board.tiles[nextMove].piece.color != piece.color){
                                piece.legalMoves.push(nextMove);
                                break;
                            }
                            else break;
                        }
                        else{
                            piece.legalMoves.push(nextMove);
                            nextMove+=move;
                        }
                    }
                }
                if(move === 9){
                    while(nextMove<63 && nextMove%8!=0){
                        if(board.tiles[nextMove].piece){
                            if(board.tiles[nextMove].piece.color != piece.color){
                                piece.legalMoves.push(nextMove);
                                break;
                            }
                            else break;
                        }
                        else{
                            piece.legalMoves.push(nextMove);
                            nextMove+=move;
                        }
                    }
                }
                if(move === 7){
                    while(nextMove<63 && nextMove%8!=7){
                        if(board.tiles[nextMove].piece){
                            if(board.tiles[nextMove].piece.color != piece.color){
                                piece.legalMoves.push(nextMove);
                                break;
                            }
                            else break;
                        }
                        else{
                            piece.legalMoves.push(nextMove);
                            nextMove+=move;
                        }
                    }
                }
                if(move === -9){
                    while(nextMove>0 && nextMove%8!=7){
                        if(board.tiles[nextMove].piece){
                            if(board.tiles[nextMove].piece.color != piece.color){
                                piece.legalMoves.push(nextMove);
                                break;
                            }
                            else break;
                        }
                        else{
                            piece.legalMoves.push(nextMove);
                            nextMove+=move;
                        }
                    }
                }
            }
        
        }